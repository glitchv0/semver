# .github/release-drafter.yml

# Define labels if they don't exist (optional, requires repo write access for the action)
ensure-labels-exist:
  - feature
  - enhancement
  - bug
  - breaking-change
  - notes
  - documentation
  - chore
  - tests
  - build
  - refactor
  - skip-changelog

# Define the sections/categories based on labels
# Order matters for the final output
categories:
  - title: '‚ö†Ô∏è BREAKING CHANGES' # Use emojis or clear markers
    labels: ['breaking-change']
  - title: '‚ú® FEATURES'
    labels: ['feature']
  - title: 'üìà ENHANCEMENTS'
    labels: ['enhancement']
  - title: 'üêõ BUG FIXES'
    labels: ['bug']
  - title: 'üìù NOTES / UPGRADE INSTRUCTIONS'
    labels: ['notes']
  # Optional: Include documentation if desired, or exclude it
  # - title: 'üìñ DOCUMENTATION'
  #   labels: ['documentation']

# Exclude PRs with these labels entirely from the notes
exclude-labels:
  - 'skip-changelog' # Standard label to omit things
  - 'chore'          # Example: Exclude routine maintenance
  - 'tests'
  - 'build'
  - 'refactor'
  # - 'documentation' # Uncomment to exclude documentation changes

# Template for each line item within a category
# Uses the PR title directly, similar to Terraform's style
# $TITLE = PR Title
# $NUMBER = PR Number
# ($AUTHOR can also be used if desired: @$AUTHOR)
change-template: '- $TITLE ([#$NUMBER])'
# If you REALLY want to use the "Summary for Release Notes" section from the PR Body,
# it requires complex regex in the template, e.g.:
# change-template: '- $BODY**REQUIRED:**\n\n([^\n]+) ([#$NUMBER])'
# This is fragile and relies on exact template matching. Sticking to $TITLE is simpler.

# Template for the overall release body
# $CHANGES = The assembled, categorized list of changes
# $PREVIOUS_TAG = Previous release tag
# $RESOLVED_VERSION = The new version tag being released
template: |
  <!-- Optional: Add release date or other introductory text here -->

  $CHANGES

  <!-- Optional: Add contributor list or other closing remarks -->
  <!-- For more details see the full commit history: $PREVIOUS_TAG...$RESOLVED_VERSION -->

# Title for the release page
name-template: '$RESOLVED_VERSION' # Just the version number, like Terraform

# Tag name (workflow creates it, this is for reference/RD internal use)
tag-template: 'v$RESOLVED_VERSION'

# Automatically manages the draft (good practice, though our workflow publishes)
replacers:
  - search: /<!--(.*?)-->/g # Remove comments from the final notes
    replace: ''
