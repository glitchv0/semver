# .github/release-drafter.yml

# Configuration for Release Drafter: https://github.com/release-drafter/release-drafter#configuration
# Use categories to group changes based on PR labels
categories:
  - title: 'üöÄ Features'
    labels:
      - 'feature'
      - 'enhancement'
  - title: 'üêõ Bug Fixes'
    labels:
      - 'fix'
      - 'bug'
  - title: 'üîß Maintenance'
    labels:
      - 'chore'
      - 'maintenance'
      - 'dependencies'
  - title: 'üìñ Documentation'
    labels:
      - 'documentation'

# Template for the release notes body
# $NEXT_PATCH_VERSION, $NEXT_MINOR_VERSION, $NEXT_MAJOR_VERSION can be used
# $CHANGES will be replaced with the categorized list of PRs
template: |
  ## What's Changed

  $CHANGES

  **Full Changelog**: $PREVIOUS_TAG...$RESOLVED_VERSION
# You can add more complex logic, exclude labels, change sorting, etc.
# See the Release Drafter documentation for all options.

# Optional: Define the name template for the release title
# $RESOLVED_VERSION will be the version calculated by our workflow
name-template: 'Release $RESOLVED_VERSION'

# Optional: Define the tag template (though our workflow creates the tag first)
# tag-template: 'v$RESOLVED_VERSION' # We explicitly provide the tag in the workflow

# Automatically manage the draft release on pushes to the default branch
# This part is usually handled by the Release Drafter App/Action running on 'push',
# but we trigger the publish manually in our workflow.
