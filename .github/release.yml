# .github/release-drafter.yml

# Define categories based on labels prompted in the PR template
# Order matters: Breaking Changes often listed first.
categories:
  - title: 'üí• Breaking Changes'
    labels:
      - 'breaking-change' # Make sure this label exists in your repo
  - title: 'üöÄ Features & Enhancements'
    labels:
      - 'feature'
      - 'enhancement'
  - title: 'üêõ Bug Fixes'
    labels:
      - 'fix'
      - 'bug'
  - title: 'üì¶ Dependency Updates'
    labels:
      - 'dependencies'
  - title: 'üîß Maintenance & Chore'
    labels:
      - 'chore'
      - 'maintenance'
      - 'refactor'
      - 'build'
      - 'ci'
      - 'tests'
  - title: 'üìñ Documentation'
    labels:
      - 'documentation'

# Exclude PRs with certain labels from the release notes
exclude-labels:
  - 'skip-changelog'

# Template for each change line within a category
# $TITLE: PR Title
# $NUMBER: PR Number
# $AUTHOR: PR Author username
# $BODY: Full PR Body (Use with caution, can be long)
# Consider using a well-written PR title as the primary source.
change-template: '- $TITLE @$AUTHOR (#$NUMBER)'

# Template for the overall release notes body
# $CHANGES will be replaced with the categorized list based on the template above
# $PREVIOUS_TAG: Tag of the previous release
# $RESOLVED_VERSION: The version being released (from workflow)
# $CONTRIBUTORS: List of contributors since the last release
template: |
  ## What's Changed

  $CHANGES

  ## Contributors
  Huge thanks to everyone who contributed to this release:
  $CONTRIBUTORS

  **Full Changelog**: $PREVIOUS_TAG...$RESOLVED_VERSION

# Template for the release title
name-template: 'Release $RESOLVED_VERSION'

# Template for the tag name (usually corresponds to the version)
# Our workflow explicitly creates the tag, but this can be a fallback/reference
tag-template: 'v$RESOLVED_VERSION'

# Optional: Sort changes within categories (commit, title, number) and direction (ascending, descending)
# sort-by: title
# sort-direction: ascending # Default is descending commit date

# Optional: Include contributors section automatically
# contributors:
#  - title: 'Contributors'
#    template: 'Thanks again to $CONTRIBUTORS!' # Simpler way if you don't need custom text

# Optional: Version Resolver - we calculate version in the workflow,
# but RD can also infer based on labels (e.g., 'major', 'minor', 'patch' labels)
# version-resolver:
#   major:
#     labels: ['major', 'breaking-change'] # Example if you used labels for bumping
#   minor:
#     labels: ['minor', 'feature', 'enhancement']
#   patch:
#     labels: ['patch', 'fix', 'bug', 'chore', 'documentation']
#   default: patch # Default bump if no matching labels found
