name: Create Release on Merge with Release Drafter

on:
  pull_request:
    types: [closed] # Trigger when a PR is closed

permissions:
  contents: write      # To create tags, push tags, publish releases
  pull-requests: read # To read PR title, body, and labels for release drafter

jobs:
  release_on_merge:
    # Only run if the PR was merged AND the base branch is the repository's default branch
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == github.event.repository.default_branch
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history and tags
          ref: ${{ github.event.repository.default_branch }}

      - name: Determine bump type from PR content
        id: determine_bump
        run: |
          # Combine title and body for easier searching (lowercase for case-insensitivity)
          title=$(echo "${{ github.event.pull_request.title }}" | tr '[:upper:]' '[:lower:]')
          body=$(echo "${{ github.event.pull_request.body }}" | tr '[:upper:]' '[:lower:]')
          content="$title $body"
          bump_type="patch" # Default bump type

          echo "Checking PR content for bump keywords..."
          if [[ "$content" == *bump_major* ]]; then
            bump_type="major"
            echo "Found 'bump_major'."
          elif [[ "$content" == *bump_minor* ]]; then
            bump_type="minor"
            echo "Found 'bump_minor'."
          elif [[ "$content" == *bump_patch* ]]; then
            bump_type="patch"
            echo "Found 'bump_patch'."
          else
            echo "No specific bump keyword found. Defaulting to 'patch'."
          fi

          echo "Determined bump type: $bump_type"
          echo "bump_type=$bump_type" >> $GITHUB_OUTPUT

      - name: Get latest tag
        id: get_tag
        run: |
          latest_tag=$(git describe --tags --abbrev=0 --match="v[0-9]*.[0-9]*.[0-9]*" 2>/dev/null || echo "v0.0.0")
          echo "Latest tag found: $latest_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: Calculate next version
        id: calculate_version
        run: |
          latest_tag="${{ steps.get_tag.outputs.latest_tag }}"
          bump_type="${{ steps.determine_bump.outputs.bump_type }}"
          new_version=""

          if [[ "$latest_tag" == "v0.0.0" ]]; then
            echo "No previous SemVer tag found. Creating initial release v1.0.0."
            new_version="v1.0.0"
          else
            echo "Previous version $latest_tag found. Bumping based on '$bump_type'."
            version=${latest_tag#v}
            IFS='.' read -r -a parts <<< "$version"
            major=${parts[0]:-0}
            minor=${parts[1]:-0}
            patch=${parts[2]:-0}

            case "$bump_type" in
              major) major=$((major + 1)); minor=0; patch=0 ;;
              minor) minor=$((minor + 1)); patch=0 ;;
              patch) patch=$((patch + 1)) ;;
            esac
            new_version="v$major.$minor.$patch"
          fi

          echo "Calculated next version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          # Strip 'v' for potential use in RD name/tag templates if needed, though we override
          echo "version_number=${new_version#v}" >> $GITHUB_OUTPUT

      - name: Create Git Tag
        run: |
          new_version="${{ steps.calculate_version.outputs.new_version }}"
          echo "Creating tag $new_version"
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          # Create an annotated tag
          git tag -a "$new_version" -m "Release $new_version triggered by merge of PR #${{ github.event.pull_request.number }}"
          git push origin "$new_version"

      - name: Publish Release Draft
        uses: release-drafter/release-drafter@v6 # Use the latest major version
        # Release Drafter Action documentation: https://github.com/release-drafter/release-drafter#action-inputs
        with:
          # We are explicitly publishing a release based on the tag we just created
          publish: true
          # Use the exact tag and version we calculated
          tag: ${{ steps.calculate_version.outputs.new_version }}
          name: Release ${{ steps.calculate_version.outputs.new_version }} # Overrides name-template in config
          # version: ${{ steps.calculate_version.outputs.version_number }} # Or let RD derive from tag
          # Optional: specify the config file name if not default
          config-name: release.yml
        env:
          # The GITHUB_TOKEN is necessary for the action to interact with GitHub API
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
